<?php

namespace App\Helpers;

/**
 * Helper do zarzƒÖdzania strukturƒÖ katalog√≥w zdjƒôƒá u≈ºytkownik√≥w.
 *
 * Organizuje zdjƒôcia w katalogi grupowane po 1000 u≈ºytkownik√≥w, gdzie ka≈ºdy
 * u≈ºytkownik ma sw√≥j w≈Çasny podkatalog na podstawie ID.
 *
 * Struktura katalog√≥w:
 * - photos/users/0000-0999/123/profile/
 * - photos/users/0000-0999/123/home/
 * - photos/users/1000-1999/1234/profile/
 * - photos/users/1000-1999/1234/home/
 *
 * @package App\Helpers
 * @author Claude AI Assistant
 * @version 1.0.0
 */
class PhotoStorageHelper
{
    /**
     * Rozmiar grupy u≈ºytkownik√≥w w jednym katalogu.
     */
    const USERS_PER_DIRECTORY = 1000;

    /**
     * Generuje ≈õcie≈ºkƒô do katalogu zdjƒôƒá u≈ºytkownika.
     *
     * U≈ºywa modulo do okre≈õlenia grupy katalog√≥w i tworzy indywidualnƒÖ
     * ≈õcie≈ºkƒô dla ka≈ºdego u≈ºytkownika na podstawie jego ID.
     *
     * @param int $userId ID u≈ºytkownika
     * @param string $photoType Typ zdjƒôcia (profile, home, pet, etc.)
     * @return string Wzglƒôdna ≈õcie≈ºka do katalogu zdjƒôƒá
     *
     * @example
     * // Dla userId = 123, photoType = 'profile'
     * // Zwraca: "users/0000-0999/123/profile"
     *
     * // Dla userId = 1234, photoType = 'home'
     * // Zwraca: "users/1000-1999/1234/home"
     */
    public static function generateUserPhotoPath(int $userId, string $photoType): string
    {
        // Oblicz grupƒô katalog√≥w u≈ºywajƒÖc modulo
        $groupStart = intval($userId / self::USERS_PER_DIRECTORY) * self::USERS_PER_DIRECTORY;
        $groupEnd = $groupStart + self::USERS_PER_DIRECTORY - 1;

        // Formatuj zakres grupy z zerami wiodƒÖcymi
        $groupRange = sprintf('%04d-%04d', $groupStart, $groupEnd);

        // Zwr√≥ƒá pe≈ÇnƒÖ ≈õcie≈ºkƒô
        return "users/{$groupRange}/{$userId}/{$photoType}";
    }

    /**
     * Generuje pe≈ÇnƒÖ ≈õcie≈ºkƒô do zapisu zdjƒôcia profilowego u≈ºytkownika.
     *
     * @param int $userId ID u≈ºytkownika
     * @param string $filename Nazwa pliku
     * @return string Pe≈Çna ≈õcie≈ºka do zapisu
     */
    public static function generateProfilePhotoPath(int $userId, string $filename): string
    {
        $basePath = self::generateUserPhotoPath($userId, 'profile');
        return "{$basePath}/{$filename}";
    }

    /**
     * Generuje pe≈ÇnƒÖ ≈õcie≈ºkƒô do zapisu zdjƒôcia domu u≈ºytkownika.
     *
     * @param int $userId ID u≈ºytkownika
     * @param string $filename Nazwa pliku
     * @return string Pe≈Çna ≈õcie≈ºka do zapisu
     */
    public static function generateHomePhotoPath(int $userId, string $filename): string
    {
        $basePath = self::generateUserPhotoPath($userId, 'home');
        return "{$basePath}/{$filename}";
    }

    /**
     * Generuje pe≈ÇnƒÖ ≈õcie≈ºkƒô do zapisu zdjƒôcia zwierzaka u≈ºytkownika.
     *
     * @param int $userId ID u≈ºytkownika
     * @param string $filename Nazwa pliku
     * @return string Pe≈Çna ≈õcie≈ºka do zapisu
     */
    public static function generatePetPhotoPath(int $userId, string $filename): string
    {
        $basePath = self::generateUserPhotoPath($userId, 'pets');
        return "{$basePath}/{$filename}";
    }

    /**
     * Zwraca informacje o grupie katalog√≥w dla u≈ºytkownika.
     *
     * Przydatne do debugowania i logowania.
     *
     * @param int $userId ID u≈ºytkownika
     * @return array Informacje o grupie
     */
    public static function getUserGroupInfo(int $userId): array
    {
        $groupStart = intval($userId / self::USERS_PER_DIRECTORY) * self::USERS_PER_DIRECTORY;
        $groupEnd = $groupStart + self::USERS_PER_DIRECTORY - 1;
        $groupRange = sprintf('%04d-%04d', $groupStart, $groupEnd);

        return [
            'user_id' => $userId,
            'group_start' => $groupStart,
            'group_end' => $groupEnd,
            'group_range' => $groupRange,
            'users_per_directory' => self::USERS_PER_DIRECTORY,
            'base_path' => "users/{$groupRange}/{$userId}"
        ];
    }

    /**
     * Sprawdza czy katalog u≈ºytkownika powinien byƒá utworzony.
     *
     * @param int $userId ID u≈ºytkownika
     * @param string $photoType Typ zdjƒôcia
     * @return bool True je≈õli katalog nie istnieje
     */
    public static function shouldCreateDirectory(int $userId, string $photoType): bool
    {
        $path = self::generateUserPhotoPath($userId, $photoType);
        $fullPath = storage_path("app/public/{$path}");

        return !is_dir($fullPath);
    }

    /**
     * Tworzy katalog u≈ºytkownika je≈õli nie istnieje.
     *
     * @param int $userId ID u≈ºytkownika
     * @param string $photoType Typ zdjƒôcia
     * @return bool True je≈õli katalog zosta≈Ç utworzony lub ju≈º istnieje
     */
    public static function ensureDirectoryExists(int $userId, string $photoType): bool
    {
        $path = self::generateUserPhotoPath($userId, $photoType);
        $fullPath = storage_path("app/public/{$path}");

        if (!is_dir($fullPath)) {
            return mkdir($fullPath, 0755, true);
        }

        return true;
    }

    /**
     * Czy≈õci starsze zdjƒôcia u≈ºytkownika (opcjonalne).
     *
     * Mo≈ºe byƒá u≈ºywane do czyszczenia starych zdjƒôƒá przy upload nowych.
     *
     * @param int $userId ID u≈ºytkownika
     * @param string $photoType Typ zdjƒôcia
     * @param int $keepLatest Ile najnowszych plik√≥w zachowaƒá
     * @return int Liczba usuniƒôtych plik√≥w
     */
    public static function cleanupOldPhotos(int $userId, string $photoType, int $keepLatest = 5): int
    {
        $path = self::generateUserPhotoPath($userId, $photoType);
        $fullPath = storage_path("app/public/{$path}");

        if (!is_dir($fullPath)) {
            return 0;
        }

        $files = glob($fullPath . '/*');

        \Log::info('üì∏ Cleanup - files before sort', [
            'count' => count($files),
            'files' => array_map('basename', $files)
        ]);

        usort($files, function($a, $b) {
            return filemtime($b) - filemtime($a); // Sortuj po dacie modyfikacji (najnowsze pierwsze)
        });

        \Log::info('üì∏ Cleanup - files after sort', [
            'keepLatest' => $keepLatest,
            'filesToKeep' => array_map('basename', array_slice($files, 0, $keepLatest)),
            'filesToDelete' => array_map('basename', array_slice($files, $keepLatest))
        ]);

        $deleted = 0;
        for ($i = $keepLatest; $i < count($files); $i++) {
            if (is_file($files[$i])) {
                \Log::info('üì∏ Deleting old photo', ['file' => basename($files[$i])]);
                unlink($files[$i]);
                $deleted++;
            }
        }

        return $deleted;
    }

    /**
     * Czy≈õci stare tymczasowe pliki Livewire (starsze ni≈º 24h).
     *
     * Livewire tworzy tymczasowe pliki podczas uploadu, kt√≥re czasami
     * mogƒÖ zostaƒá je≈õli proces zosta≈Ç przerwany.
     *
     * @param int $olderThanHours Usu≈Ñ pliki starsze ni≈º X godzin (domy≈õlnie 24h)
     * @return int Liczba usuniƒôtych plik√≥w
     */
    public static function cleanupLivewireTempFiles(int $olderThanHours = 24): int
    {
        $tempPath = storage_path('app/livewire-tmp');

        if (!is_dir($tempPath)) {
            return 0;
        }

        $deleted = 0;
        $cutoffTime = time() - ($olderThanHours * 3600);

        $files = glob($tempPath . '/*');
        foreach ($files as $file) {
            if (is_file($file) && filemtime($file) < $cutoffTime) {
                unlink($file);
                $deleted++;
            }
        }

        return $deleted;
    }
}